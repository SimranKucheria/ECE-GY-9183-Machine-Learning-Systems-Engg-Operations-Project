version: '3.8'

services:
  minio-create-buckets:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      until mc alias set minio http://129.114.27.179:9000 your-access-key dmq17cBavTCP169xPxQP; do
        echo 'Waiting for MinIO...'
        sleep 2
      done &&
      if ! mc ls minio/ray; then
        mc mb minio/ray &&
        echo 'Bucket ray created'
      else
        echo 'Bucket ray already exists';
      fi &&
      if ! mc ls minio/mlflow-artifacts; then
        mc mb minio/mlflow-artifacts &&
        echo 'Bucket mlflow-artifacts created'
      else
        echo 'Bucket mlflow-artifacts already exists';
      fi"
    healthcheck:
      test: ["CMD-SHELL", "mc ping minio --count 1 --error-count 1"]
      interval: 5s
      timeout: 10s
      retries: 10


  # Ray Head Node
  ray-head:
    image: rayproject/ray:2.42.1
    container_name: ray-head
    command: |
      /bin/sh -c "
      mkdir -p /tmp/ray && 
      chown -R root:root /tmp/ray &&
      ray metrics launch-prometheus &&
      ray start --head --port=6379 --dashboard-host=0.0.0.0 --block --metrics-export-port=8080"
    ports:
      - "6379:6379" 
      - "8265:8265" 
      - "8080:8080" 
      - "8090:8090" 
      - "9090:9090" 
    shm_size: '12g'
    volumes:
      - ray_tmp:/tmp/ray
    environment:
      - RAY_GRAFANA_HOST=http://grafana:3000
      - RAY_GRAFANA_IFRAME_HOST=http://192.5.87.133:3000
      - RAY_PROMETHEUS_HOST=http://ray-head:9090
      - RAY_PROMETHEUS_NAME=Prometheus
      - AWS_ACCESS_KEY_ID=your-access-key
      - AWS_SECRET_ACCESS_KEY=dmq17cBavTCP169xPxQP
      - AWS_ENDPOINT_URL=http://129.114.27.179:9000
    user: root
    depends_on:
      - minio-create-buckets

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    entrypoint: |
      /bin/sh -c "
      # Wait for config directory
      while [ ! -f /tmp/ray/session_latest/metrics/grafana/grafana.ini ]; do
        echo 'Waiting for Grafana config files...'
        sleep 2
      done
      
      # Start Grafana with copied config
      /run.sh --config /tmp/ray/session_latest/metrics/grafana/grafana.ini"
    ports:
      - "3000:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ray_tmp:/tmp/ray:ro
      - Project3Data:/mnt
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/tmp/ray/session_latest/metrics/grafana/provisioning
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_DATABASE_TYPE=sqlite3
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_AUTO_SIGN_UP=true
    depends_on:
      - ray-head


  ray-worker-1:
    image: rayproject/ray:2.42.1-gpu
    container_name: ray-worker-0
    command: ["ray", "start", "--address=ray-head:6379", "--num-cpus=32", "--num-gpus=1", "--block"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: "nvidia"
              capabilities: ["gpu"]
              device_ids: ["0"]
    environment:
      - AWS_ACCESS_KEY_ID=your-access-key     # for MinIO access
      - AWS_SECRET_ACCESS_KEY=dmq17cBavTCP169xPxQP
      - AWS_ENDPOINT_URL=http://129.114.27.179:9000
      - MLFLOW_TRACKING_URI=http://129.114.27.179:8000/
    shm_size: '12g'
    volumes:
      - Project3Data:/mnt
    depends_on:
      - ray-head
  
  jupyter-all:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8888:8888"
    volumes:
      - ~/work/train:/home/jovyan/work/
      - Project3Data:/mnt/
    environment:
      - MLFLOW_TRACKING_URI=http://129.114.27.179:8000/
      - RAY_ADDRESS=http://ray-head:8265/
    shm_size: 16G
    container_name: jupyter-all
    restart: unless-stopped

  app-for-training:
    build:
      context: .
      dockerfile: Dockerfile.train_app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8005:8005"
    volumes:
      # - ~/work/train:/home/jovyan/work/
      - Project3Data:/mnt/
    environment:
      - MLFLOW_TRACKING_URI=http://129.114.27.179:8000/
      - RAY_ADDRESS=http://ray-head:8265/
    shm_size: 16G
    container_name: train-app
  # ray-worker-2:
  #   image: rayproject/ray:2.42.1-gpu
  #   container_name: ray-worker-1
  #   command: ["ray", "start", "--address=ray-head:6379", "--num-cpus=32", "--num-gpus=1", "--block"]
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: "nvidia"
  #             capabilities: ["gpu"]
  #             device_ids: ["1"]
  #   environment:
  #     - AWS_ACCESS_KEY_ID=your-access-key     # for MinIO access
  #     - AWS_SECRET_ACCESS_KEY=dmq17cBavTCP169xPxQP
  #     - AWS_ENDPOINT_URL=http://129.114.27.179:9000
  #     - MLFLOW_TRACKING_URI=http://129.114.27.179:8000/
  #   shm_size: '12g'
  #   volumes:
  #     - Project3Data:/mnt
  #   depends_on:
  #     - ray-head

  # Uncomment to add more workers
  # ray-worker-2:
  #   image: rayproject/ray:2.42.1-gpu
  #   container_name: ray-worker-1
  #   command: ["ray", "start", "--address=ray-head:6379", "--num-cpus=32", "--num-gpus=1", "--block"]
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: "nvidia"
  #             capabilities: ["gpu"]
  #             device_ids: ["1"]
  #   environment:
  #     - AWS_ACCESS_KEY_ID=your-access-key
  #     - AWS_SECRET_ACCESS_KEY=dmq17cBavTCP169xPxQP
  #     - AWS_ENDPOINT_URL=http://minio:9000
  #   shm_size: '12g'
  #   depends_on:
  #     - ray-head

volumes:
  grafana_storage:
  ray_tmp:
  Project3Data:
    external: true  # Uses externally created volume