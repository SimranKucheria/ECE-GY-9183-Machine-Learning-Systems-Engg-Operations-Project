name: deeptrust_serve
services:
  fastapi_server:
    build:
      context: ./inference_service  # relative path to FastAPI code
      dockerfile: Dockerfile
    container_name: fastapi_server
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8000:8000"  # for HTTP requests

  triton_server:
    build:
      # context: /home/cc/work/BLIP
      context: ./BLIP  # relative path to Triton code
      dockerfile: Dockerfile.triton
    container_name: triton_server
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8010:8010"  # for HTTP requests
      - "8001:8001"  # for GRPC requests
      - "8002:8002"  # for reporting metrics

  vllm:
    image: vllm/vllm-openai:latest
    container_name: vllm
    runtime: nvidia
    environment:
      - HUGGING_FACE_HUB_TOKEN=${HF_API_KEY}
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "8005:8000"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    command: --model mistralai/Mistral-7B-Instruct-v0.2
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
    ipc: host

  jupyter:
    image: quay.io/jupyter/minimal-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - /home/cc/deeptrust:/home/jovyan/work
      - /mnt/object:/mnt/data
    command: >
      bash -c "python3 -m pip install numpy && start-notebook.sh"

  flask:
    build:
      context: ./ui_service  # path to Flask UI code, in our case github repo link
      dockerfile: Dockerfile
    container_name: flask
    ports:
      - "80:5000"
    environment:
      - FASTAPI_SERVER_URL=http://fastapi_server:8000
      - TRITON_SERVER_URL=triton_server:8000
      - VLLM_SERVER_URL=http://vllm:8005
      - MINIO_URL=http://minio:9000
      - MINIO_USER=your-access-key
      - MINIO_PASSWORD=your-secret-key
    depends_on:
      - fastapi_server
      - minio

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  
  grafana:
    # build:
    #   context: ./grafana  
    #   dockerfile: Dockerfile
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=team3_AMPS
      - GF_SECURITY_ADMIN_PASSWORD=team3_AMPS
    volumes:
      # Mount application data
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      # Mount provisioning config files
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=your-access-key
      - MINIO_ROOT_PASSWORD=your-secret-key
    volumes:
      - minio_data:/data
    command: server /data --console-address ':9001'

  minio-init:
    image: minio/mc
    container_name: minio_init
    depends_on:
      - minio
    restart: "no"
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set myminio http://minio:9000 your-access-key your-secret-key &&
      mc mb -p myminio/production || echo 'Bucket already exists'
      "

  label-studio:
    image: heartexlabs/label-studio:1.16.0
    container_name: label-studio
    ports:
      - "8080:8080"
    environment:
      - LABEL_STUDIO_URL=http://label-studio:8080
      - LABEL_STUDIO_USERNAME=labelstudio@example.com
      - LABEL_STUDIO_PASSWORD=labelstudio
      - LABEL_STUDIO_USER_TOKEN=ab9927067c51ff279d340d7321e4890dc2841c4a
      - POSTGRES_HOST=app-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=appdb
      - MINIO_USER=your-access-key
      - MINIO_PASSWORD=your-secret-key
      - MINIO_URL=http://minio:9000
    depends_on:
      - minio

  label-studio-init:
    image: python:3.11-slim-buster
    build:
      context: ./label_studio
      dockerfile: Dockerfile
    container_name: label-studio-init
    depends_on:
      - label-studio
    restart: "no"
    environment:
      - LABEL_STUDIO_URL=http://label-studio:8080
      - LABEL_STUDIO_USERNAME=labelstudio@example.com
      - LABEL_STUDIO_PASSWORD=labelstudio
      - LABEL_STUDIO_USER_TOKEN=ab9927067c51ff279d340d7321e4890dc2841c4a
      - MINIO_USER=your-access-key
      - MINIO_PASSWORD=your-secret-key
      - MINIO_URL=http://minio:9000

